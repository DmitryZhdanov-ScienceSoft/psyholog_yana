import asyncio

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from keyboards.inline import MyCallback, SELECT_MALE, one_button
from database import Database
from handlers.State import StepsForm

db = Database()


async def male(call: CallbackQuery):
    text = '''‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è
–†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ üôÇ'''

    await call.message.edit_text(
        text=text,
        reply_markup=SELECT_MALE
    )


async def select_male(call: CallbackQuery, callback_data: MyCallback, state: FSMContext):
    male_name = callback_data.call.split('_')[1]

    db.update_field(user_id=call.message.chat.id,
                    field='male',
                    value=male_name)

    await call.message.edit_text('''üü¢‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è
–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?''')

    await state.set_state(StepsForm.name)


async def get_name(message: Message, state: FSMContext):
    if message.text:
        name = message.text

        db.update_field(user_id=message.chat.id,
                        field='name',
                        value=name)

        await message.answer('''üü¢üü¢‚ö™Ô∏è‚ö™Ô∏è
–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?''')

        await state.set_state(StepsForm.age)

    else:
        text = '‚ö†Ô∏è _–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!_\n\n*–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?*'
        await message.answer(text=text)

        await state.set_state(StepsForm.name)


async def get_age(message: Message, state: FSMContext):
    if message.text:
        age = message.text

        db.update_field(user_id=message.chat.id,
                        field='age',
                        value=age)

        await message.answer('''üü¢üü¢üü¢‚ö™Ô∏è
–ß—Ç–æ –µ—â–µ –≤–∞–∂–Ω–æ –æ —Ç–µ–±–µ –∑–Ω–∞—Ç—å? –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –Ω–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤.''',
                             reply_markup=one_button(
                                 '–ó–∞–ø–æ–ª–Ω—é –ø–æ–∑–∂–µ üôÇ',
                                 'openai'
                             ))

        await state.set_state(StepsForm.descr)

    else:
        text = '‚ö†Ô∏è _–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!_\n\n*–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?*'
        await message.answer(text=text)

        await state.set_state(StepsForm.age)


async def get_descr(message: Message, state: FSMContext):
    if message.text:
        description = message.text

        db.update_field(user_id=message.chat.id,
                        field='description',
                        value=description)

        await message.answer(text='''üü¢üü¢üü¢üü¢
–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –∞–Ω–∫–µ—Ç—É! –¢–µ–ø–µ—Ä—å —è –±–æ–ª—å—à–µ –æ —Ç–µ–±–µ –∑–Ω–∞—é, –∏ —Å–º–æ–≥—É –ª—É—á—à–µ –æ—Ç–≤–µ—á–∞—Ç—å.''')

        await asyncio.sleep(2)

        await message.answer(text='–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–π –¥–µ–Ω—å? –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫—Ä—É–∂–æ–∫, –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ.')
        await state.set_state(StepsForm.text_request)

    else:
        text = '‚ö†Ô∏è _–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!_\n\n*–ß—Ç–æ –µ—â–µ –≤–∞–∂–Ω–æ –æ —Ç–µ–±–µ –∑–Ω–∞—Ç—å? –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –Ω–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤.*'
        await message.answer(text=text)

        await state.set_state(StepsForm.descr)


def router(rt: Router):
    rt.message.register(get_name, StepsForm.name)
    rt.message.register(get_age, StepsForm.age)
    rt.message.register(get_descr, StepsForm.descr)

    rt.callback_query.register(male, MyCallback.filter(F.call == 'opros'))

    rt.callback_query.register(select_male, MyCallback.filter(F.call.startswith('male_')))
