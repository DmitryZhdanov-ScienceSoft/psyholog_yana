import asyncio
import requests

from aiogram import Router, Bot, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile, LabeledPrice, PreCheckoutQuery
from aiogram.utils.markdown import link
from crypto_pay_api_sdk import cryptopay
from yoomoney import Quickpay, Client

from config import BOT_NAMING, CRYPTO_TOKEN, YOOMONEY_TOKEN, RECEIVER
from database import Database
from keyboards.inline import MyCallback, BUY_MENU, BACK_TO_START, upload_payment, payload_markup, pay

db = Database()
Crypto = cryptopay.Crypto(token=CRYPTO_TOKEN)

sroki = {
    '1 –º–µ—Å—è—Ü': 30,
    '3 –º–µ—Å—è—Ü–∞': 90,
    '6 –º–µ—Å—è—Ü–µ–≤': 180
}

timetosleep = {
    30: 2592000,
    90: 7776000,
    180: 15552000
}


async def main_menu(message: Message, bot: Bot):
    await bot.send_chat_action(message.chat.id, 'typing')

    text = '''
`–î–æ—Å—Ç—É–ø –∫ –Ø–Ω–∞ Premium`

‚è≥ `–î–æ 2 —á–∞—Å–æ–≤ –æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å   `  
üóØ `–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã   `  
üåê `–û–Ω–ª–∞–π–Ω 24/7, –¥–Ω–µ–º –∏ –Ω–æ—á—å—é    ` 
üòé `–°–∞–º–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å `    
    
üòä `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã`
üí∏ `–¢–∞—Ä–∏—Ñ –Ω–∞ 1 –º–µ—Å—è—Ü –¥–µ—à–µ–≤–ª–µ 1 —Å–µ—Å—Å–∏–∏ —É —á–µ–ª–æ–≤–µ–∫–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∞`
'''

    await message.answer_photo(photo=FSInputFile(f'system_files/premium.jpg'),
                               caption=text, reply_markup=BUY_MENU)


async def buy(call: CallbackQuery, callback_data: MyCallback):
    name_of_subscribe = callback_data.call.split('_')[1]
    price = callback_data.call.split('_')[2]

    srok = sroki[name_of_subscribe]

    text = f'''
–ö –æ–ø–ª–∞—Ç–µ: 
*{price} —Ä—É–±–ª–µ–π üá∑üá∫ –∫–∞—Ä—Ç–æ–π.*   

–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *{srok} –¥–Ω–µ–π*. 
–î–æ—Å—Ç—É–ø–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤: *100 –≤ –¥–µ–Ω—å* = 2 —á–∞—Å–∞ –æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.        
    
üí≥ –í—ã–±–µ—Ä–∏—Ç–µ *–ÆMoney*, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ *–æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π*.
ü™ô –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ *–æ–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π*, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ *–°ryptoPay*.'''

    await call.message.answer(text=text,
                              reply_markup=upload_payment(f'{name_of_subscribe}_{price}'))


async def pay_yoomoney(call: CallbackQuery, callback_data: MyCallback):
    await call.message.delete()

    price = int(callback_data.call.split('_')[2])
    name = callback_data.call.split('_')[1]

    user_id = call.message.chat.id
    order_id = db.select_order_id(user_id=user_id) + 1
    db.update_order_id(user_id=user_id, order_id=order_id)

    callbk = f'oplata_{name}_{price}_{order_id}'

    quickpay = Quickpay(
        receiver=RECEIVER,
        quickpay_form="shop",
        targets=f"{BOT_NAMING} | –û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ {name}",
        paymentType="SB",
        sum=price,
        label=callbk
    )

    text = f'''–í–∞—à –∑–∞–∫–∞–∑: *{BOT_NAMING} |  –û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ {name}*

–°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞–Ω
üîê –¶–µ–Ω–∞: *{price}‚ÇΩ*

_‚ÄºÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É_ *‚úÖ –û–ø–ª–∞—á–µ–Ω–æ* _–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏_'''

    await call.message.answer(text=text,
                                    reply_markup=payload_markup(url=quickpay.redirected_url,
                                                                call=callbk))


async def successful_payment(call: CallbackQuery, bot: Bot, callback_data: MyCallback):
    callback = callback_data.call

    if callback.startswith('oplata_'):
        callback_data = callback.split('_')

        name = callback_data[1]

        client = Client(YOOMONEY_TOKEN)

        history = client.operation_history(label=callback)

        if not history.operations:
            text = '''–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –∞ –¥–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è'''

            await call.answer(text,
                              show_alert=True)
        else:
            await call.message.delete()
            user_id = call.message.chat.id

            text = 'üíµ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!\n\n‚åõÔ∏è *–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–∞—Ä–∏—Ñ...*'

            msg = await call.message.answer(text)

            await bot.send_chat_action(call.message.chat.id, 'typing')

            db.update_buying_usage(user_id, 100, 1)

            text = f'''
üöÄ *–£—Ä–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∂–¥–µ—Ç –≤–∞—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ!*
'''

            srok = sroki[name]
            time_to_sleep = timetosleep[srok]

            await msg.edit_text(text,
                                reply_markup=BACK_TO_START)

            await asyncio.sleep(time_to_sleep)

            db.update_buying_usage(user_id, 20, 0)

            await call.message.answer('''ü™´ *–£–ø—Å, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É*

üí≥ –ö—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞—Ä–∏—Ñ—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!''',
                                      reply_markup=BUY_MENU)


async def cryptopay(call: CallbackQuery, callback_data: MyCallback):
    await call.message.delete()

    callback = callback_data.call

    crypto_name = 'tether'

    price = int(callback.split('_')[2])
    name = callback.split('_')[1]

    data = float(requests.get(f'https://api.coingecko.com/api/v3/coins/{crypto_name}').json()['market_data']['current_price']['rub'])

    price2 = float(price) / data

    text = f'''
üí∏ *–í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —Ç–∞—Ä–∏—Ñ Premium –Ω–∞ {name}*

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *{price2}USDT* ‚âà {price}‚ÇΩ

_–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ_
'''

    user_id = call.message.chat.id

    order_id = db.select_order_id(user_id=user_id) + 1
    db.update_order_id(user_id=user_id, order_id=order_id)

    payload = Crypto.createInvoice(asset="USDT", amount=str(price2),
                               params={
                                    "paid_bth_url": f"https://t.me/{BOT_NAMING}/"
                               })

    url_pay = payload['result']['pay_url']
    id = payload['result']['invoice_id']

    await call.message.answer(text=text, reply_markup=pay(url_pay, id, name, price))


async def check_pay(call: CallbackQuery, callback_data: MyCallback, bot: Bot):
    order_id = callback_data.call.split('_')[1]

    invoice = Crypto.getInvoices(params={'id': order_id})

    status = invoice['result']['items'][0]['status']

    if status == 'active':
        text = '''–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –∞ –¥–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è'''

        await call.answer(text,
                          show_alert=True)

    else:
        name = callback_data.call.split('_')[2]

        message = call.message

        user_id = message.chat.id

        text = 'üíµ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!\n\n‚åõÔ∏è *–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø–∞–∫–µ—Ç...*'

        msg = await message.answer(text)

        await bot.send_chat_action(message.chat.id, 'typing')

        db.update_buying_usage(user_id, 100, 1)

        text = f'''
üöÄ *–£—Ä–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∂–¥–µ—Ç –≤–∞—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ!*
        '''

        srok = sroki[name]
        time_to_sleep = timetosleep[srok]

        await msg.edit_text(text,
                            reply_markup=BACK_TO_START)

        await asyncio.sleep(time_to_sleep)

        db.update_buying_usage(user_id, 20, 0)

        await call.message.answer('''ü™´ *–£–ø—Å, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É*

üí≥ –ö—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞—Ä–∏—Ñ—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!''',
                                  reply_markup=BUY_MENU)


async def delete(call: CallbackQuery):
    await call.message.delete()


def router(rt: Router):
    rt.message.register(main_menu, F.text == '/pay')

    rt.callback_query.register(buy, MyCallback.filter(F.call.startswith('buy_')))

    rt.callback_query.register(pay_yoomoney, MyCallback.filter(F.call.startswith('yoo_')))

    rt.callback_query.register(cryptopay, MyCallback.filter(F.call.startswith('crypto_')))
    rt.callback_query.register(check_pay, MyCallback.filter(F.call.startswith('chent_')))

    rt.callback_query.register(successful_payment, MyCallback.filter(F.call.startswith('oplata_')))

    rt.callback_query.register(delete, MyCallback.filter(F.call == 'delete'))
